
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.security.SecureRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Dell
 */
public class vernamFramePractice extends javax.swing.JFrame {

    final String alphaNumerics = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    int counter = 0;

    public vernamFramePractice() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        pathField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        counterL = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Abdi Geremu's vernams Cipher Text..................(ONE TIME PAD)");
        setPreferredSize(new java.awt.Dimension(1200, 700));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton4.setBackground(new java.awt.Color(0, 102, 102));
        jButton4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 0, 204));
        jButton4.setText("Browse File");
        jButton4.setToolTipText("Reads .txt File format");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 260, 120, 40));

        pathField.setEditable(false);
        pathField.setBackground(new java.awt.Color(153, 255, 255));
        pathField.setText(" ..path");
        pathField.setToolTipText("File Path");
        jPanel1.add(pathField, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 330, 250, 40));

        jButton2.setBackground(new java.awt.Color(0, 102, 102));
        jButton2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 255));
        jButton2.setText("Decrypt");
        jButton2.setToolTipText("Decryption Button");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 460, 90, 40));

        jButton3.setBackground(new java.awt.Color(0, 102, 102));
        jButton3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 0, 204));
        jButton3.setText("Save");
        jButton3.setToolTipText("Save file as .txt only");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 460, 90, 40));

        textArea1.setBackground(new java.awt.Color(0, 102, 102));
        textArea1.setColumns(20);
        textArea1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        textArea1.setForeground(new java.awt.Color(255, 255, 255));
        textArea1.setRows(5);
        textArea1.setCaretColor(new java.awt.Color(255, 0, 204));
        textArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(textArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 830, 490));

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 255));
        jButton1.setText("Encrypt");
        jButton1.setToolTipText("Encryption Button");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 400, 90, 40));

        counterL.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        counterL.setForeground(new java.awt.Color(255, 0, 204));
        counterL.setText(" Counter: 0");
        jPanel1.add(counterL, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 80, 80, 30));

        jButton5.setBackground(new java.awt.Color(255, 0, 255));
        jButton5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton5.setText("CLEAR");
        jButton5.setToolTipText("Reset All");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 402, -1, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/368147.jpg"))); // NOI18N
        jLabel1.setText(" ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1230, 1600));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1230, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        textArea1.setText(encryption(textArea1.getText()));
        counter++;
        counterL.setText("counter:" + counter);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        textArea1.setText(decryption(textArea1.getText()));
        counter--;
        counterL.setText("counter: " + counter);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("User.home"));

        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.choose only text document", "pdf", "txt");
        fileChooser.addChoosableFileFilter(filter);
        //  int result = fileChooser.showSaveDialog(null);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            String path;
            File selectedFile = fileChooser.getSelectedFile();
            path = selectedFile.getAbsolutePath();

            pathField.setText(path);

            try {
                FileReader reader = new FileReader(path);
                BufferedReader br = new BufferedReader(reader); // It buffers the characters in order to enable efficient reading of text data
                textArea1.read(br, null);
                br.close();
                textArea1.requestFocus();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(vernamFramePractice.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(vernamFramePractice.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (result == JFileChooser.CANCEL_OPTION) {
// do nothing if canceled
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            JFileChooser fileSaver = new JFileChooser();

            fileSaver.showSaveDialog(null);// opens the file saver window to select a location and also give names for the file

            File f = fileSaver.getSelectedFile();
            if (!Files.exists(f.toPath())) { // checks if file already exists or not  in specified directory

                pathField.setText(f.toPath().toString());
                String name = f.getName();

                FileWriter writer = new FileWriter(f.toPath().toString());
                BufferedWriter bw = new BufferedWriter(writer);
                textArea1.write(bw);
                bw.close();
                textArea1.requestFocus();

            } else {
                JOptionPane.showMessageDialog(this, "File exists \n please rename");// if file exist shows a translatedMessage 
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Aborted");//  aborts the saving if closed
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        counterL.setText("counter: " + 0);
        textArea1.setText("");
        pathField.setText("");
        counter = 0;
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vernamFramePractice().setVisible(true);
            }
        });
    }

    public String encryption(String plainText) {
        final byte[] algorithm = {2, 7, 9, 5, 9, 0, 3, 1, 6, 3};
        SecureRandom secureRandom = new SecureRandom(algorithm);
        byte[] messageValue = plainText.getBytes();
        int[] messageInt = new int[plainText.length()];
        secureRandom.nextBytes(messageValue);///  generates a array of generated random number for all given plain text characters
        String message = "";

        char[] encrypted = new char[plainText.length()];

        char[] convert = textArea1.getText().toCharArray();
        char[] symbols = alphaNumerics.toCharArray();

        int index;

        for (int j = 0; j < plainText.length(); j++) {

            messageInt[j] = (int) messageValue[j];
            char rawChar = convert[j];
            if (!String.valueOf(rawChar).equals(" ") && !String.valueOf(rawChar).equals("\n") && !String.valueOf(rawChar).equals("\t")) {
                index = alphaNumerics.indexOf(rawChar);// gets the index value o characters
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////algorithm to implement encryption and decryption/////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
                if (messageInt[j] < 0) {
                    messageInt[j] = -messageInt[j];
                }
                int value;
                value = (index + messageInt[j]) % alphaNumerics.length();
                if (value < 0) {                            // checks if the remainder is
                    value = value + alphaNumerics.length();// negative and adds the lenths of the symbols to make it positive
                }
                encrypted[j] = symbols[value];

                char finalChar = encrypted[j];

                message = message + String.valueOf(finalChar);
            } else {
                message = message + rawChar;
            }

        }

        return message;

    }
/////// returs decrypted ciphertext////////////////////////////////
    public String decryption(String cipherText) {
        final byte[] algorithm = {2, 7, 9, 5, 9, 0, 3, 1, 6, 3};
        SecureRandom secureRandom = new SecureRandom(algorithm);
        byte[] messageValue = cipherText.getBytes();
        int[] messageInt = new int[cipherText.length()];
        secureRandom.nextBytes(messageValue);
        String message = "";

        char[] encrypted = new char[cipherText.length()];

        char[] convert = textArea1.getText().toCharArray();
        char[] symbols = alphaNumerics.toCharArray();

        int index;

        for (int j = 0; j < cipherText.length(); j++) {
            messageInt[j] = (int) messageValue[j];
            char rawChar = convert[j];
            ////// space , new line and tab are not encrypted in this algorithm
            if (!String.valueOf(rawChar).equals(" ") && !String.valueOf(rawChar).equals("\n") && !String.valueOf(rawChar).equals("\t")) {
                index = alphaNumerics.indexOf(rawChar);// gets the index value of characters

// algorithm to implement encryption and decryption
                if (messageInt[j] < 0) {
                    messageInt[j] = -messageInt[j];
                }
                int value;
                value = (index - messageInt[j]) % alphaNumerics.length();
                if (value < 0) { // checks if the remainder is negative and adds the lenths of the symbols to make it positive
                    value = value + alphaNumerics.length();
                }
                encrypted[j] = symbols[value];

                char c = encrypted[j];

                message = message + String.valueOf(c);

            } else {
                message = message + rawChar;
            }

        }

        return message;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel counterL;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pathField;
    private javax.swing.JTextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
